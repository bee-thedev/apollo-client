{"ast":null,"code":"// import { WebSocketLink } from '@apollo/client/link/ws';\n// import { onError } from '@apollo/client/link/error'\n// // import { getMainDefinition } from '@apollo/client/utilities';\n// import {\n//     ApolloClient,\n//     InMemoryCache,\n//     ApolloProvider,\n//     HttpLink,\n//     // from,\n//     // split\n// } from \"@apollo/client\"\n// // use for Pub/Sub (Subscription)\n// const wsLink = new WebSocketLink({\n//     uri: process.env.REACT_APP_GRAPHQL_WS_URI,\n//     options: {\n//         reconnect: true,\n//         // connectionParams: {\n//         //     authToken: '<authToken>',\n//         // }\n//     }\n// });\n// const httpLink = new HttpLink({\n//     uri: process.env.REACT_APP_GRAPHQL_URI\n// });\n// // https://www.apollographql.com/docs/react/data/error-handling/\n// const errorLink = onError(({ graphqlErrors, networkErrors }) => {\n//     if (graphqlErrors) {\n//         graphqlErrors.map(({ message, location, path }) => {\n//             alert('GraphQL Error: ' + message);\n//         });\n//     }\n//     // To retry on network errors, we recommend the RetryLink\n//     // instead of the onError link. This just logs the error.\n//     if (networkErrors) {\n//         console.log(`[Network error]: ${networkErrors}`);\n//     }\n// })\n// // The split function takes three parameters: (https://www.apollographql.com/docs/react/data/subscriptions/)\n// // * A function that's called for each operation to execute\n// // * The Link to use for an operation if the function returns a \"truthy\" value\n// // * The Link to use for an operation if the function returns a \"falsy\" value\n// // const splitLink = split(\n// //     ({ query }) => {\n// //         const definition = getMainDefinition(query);\n// //         return (\n// //             definition.kind === 'OperationDefinition' &&\n// //             definition.operation === 'subscription'\n// //         );\n// //     },\n// //     wsLink,\n// //     httpLink,\n// // );\n// // const client = new ApolloClient({\n// //     cache: new InMemoryCache(),\n// //     link: from([errorLink, splitLink])\n// // })\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nconst client = new ApolloClient({\n  uri: 'https://48p1r2roz4.sse.codesandbox.io',\n  cache: new InMemoryCache()\n}); // const client = ...\n\nclient.query({\n  query: gql`\n    query GetRates {\n      rates(currency: \"USD\") {\n        currency\n      }\n    }\n  `\n}).then(result => console.log(result));\nexport { ApolloProvider, client };","map":{"version":3,"sources":["/home/beenysh/myprojects/reactapps/apollo-client/src/GraphQL/apolloSetup.js"],"names":["ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","client","uri","cache","query","then","result","console","log"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,SACIA,YADJ,EAEIC,aAFJ,EAGIC,cAHJ,EAIIC,QAJJ,EAKIC,GALJ,QAMS,gBANT;AAQA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC5BM,EAAAA,GAAG,EAAE,uCADuB;AAE5BC,EAAAA,KAAK,EAAE,IAAIN,aAAJ;AAFqB,CAAjB,CAAf,C,CAKE;;AAEFI,MAAM,CACLG,KADD,CACO;AACLA,EAAAA,KAAK,EAAEJ,GAAI;AACb;AACA;AACA;AACA;AACA;AACA;AAPO,CADP,EAUCK,IAVD,CAUMC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAVhB;AAaA,SACIR,cADJ,EAEIG,MAFJ","sourcesContent":["// import { WebSocketLink } from '@apollo/client/link/ws';\n// import { onError } from '@apollo/client/link/error'\n// // import { getMainDefinition } from '@apollo/client/utilities';\n// import {\n//     ApolloClient,\n//     InMemoryCache,\n//     ApolloProvider,\n//     HttpLink,\n//     // from,\n//     // split\n// } from \"@apollo/client\"\n\n\n// // use for Pub/Sub (Subscription)\n// const wsLink = new WebSocketLink({\n//     uri: process.env.REACT_APP_GRAPHQL_WS_URI,\n//     options: {\n//         reconnect: true,\n//         // connectionParams: {\n//         //     authToken: '<authToken>',\n//         // }\n//     }\n// });\n\n// const httpLink = new HttpLink({\n//     uri: process.env.REACT_APP_GRAPHQL_URI\n// });\n\n// // https://www.apollographql.com/docs/react/data/error-handling/\n// const errorLink = onError(({ graphqlErrors, networkErrors }) => {\n//     if (graphqlErrors) {\n//         graphqlErrors.map(({ message, location, path }) => {\n//             alert('GraphQL Error: ' + message);\n//         });\n//     }\n    \n//     // To retry on network errors, we recommend the RetryLink\n//     // instead of the onError link. This just logs the error.\n//     if (networkErrors) {\n//         console.log(`[Network error]: ${networkErrors}`);\n//     }\n// })\n\n// // The split function takes three parameters: (https://www.apollographql.com/docs/react/data/subscriptions/)\n// // * A function that's called for each operation to execute\n// // * The Link to use for an operation if the function returns a \"truthy\" value\n// // * The Link to use for an operation if the function returns a \"falsy\" value\n// // const splitLink = split(\n// //     ({ query }) => {\n// //         const definition = getMainDefinition(query);\n// //         return (\n// //             definition.kind === 'OperationDefinition' &&\n// //             definition.operation === 'subscription'\n// //         );\n// //     },\n// //     wsLink,\n// //     httpLink,\n// // );\n\n// // const client = new ApolloClient({\n// //     cache: new InMemoryCache(),\n// //     link: from([errorLink, splitLink])\n// // })\n\nimport {\n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n    useQuery,\n    gql\n  } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n    uri: 'https://48p1r2roz4.sse.codesandbox.io',\n    cache: new InMemoryCache()\n  });\n\n  // const client = ...\n\nclient\n.query({\n  query: gql`\n    query GetRates {\n      rates(currency: \"USD\") {\n        currency\n      }\n    }\n  `\n})\n.then(result => console.log(result));\n\n\nexport {\n    ApolloProvider,\n    client\n}"]},"metadata":{},"sourceType":"module"}