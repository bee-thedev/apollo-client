{"ast":null,"code":"import { WebSocketLink } from '@apollo/client/link/ws';\nimport { onError } from '@apollo/client/link/error';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, from, split } from \"@apollo/client\"; // use for Pub/Sub (Subscription)\n\nconst wsLink = new WebSocketLink({\n  uri: process.env_prod.REACT_APP_GRAPHQL_URI,\n  options: {\n    reconnect: true // connectionParams: {\n    //     authToken: '<authToken>',\n    // }\n\n  }\n});\nconst httpLink = new HttpLink({\n  uri: process.env.REACT_APP_GRAPHQL_URI\n}); // https://www.apollographql.com/docs/react/data/error-handling/\n\nconst errorLink = onError(({\n  graphqlErrors,\n  networkErrors\n}) => {\n  if (graphqlErrors) {\n    graphqlErrors.map(({\n      message,\n      location,\n      path\n    }) => {\n      alert('GraphQL Error: ' + message);\n    });\n  } // To retry on network errors, we recommend the RetryLink\n  // instead of the onError link. This just logs the error.\n\n\n  if (networkErrors) {\n    console.log(`[Network error]: ${networkErrors}`);\n  }\n}); // The split function takes three parameters: (https://www.apollographql.com/docs/react/data/subscriptions/)\n// * A function that's called for each operation to execute\n// * The Link to use for an operation if the function returns a \"truthy\" value\n// * The Link to use for an operation if the function returns a \"falsy\" value\n\nconst splitLink = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: from([errorLink, splitLink])\n});\nexport { ApolloProvider, client };","map":{"version":3,"sources":["/home/beenysh/myprojects/reactapps/apollo-client/src/GraphQL/apolloSetup.js"],"names":["WebSocketLink","onError","getMainDefinition","ApolloClient","InMemoryCache","ApolloProvider","HttpLink","from","split","wsLink","uri","process","env_prod","REACT_APP_GRAPHQL_URI","options","reconnect","httpLink","env","errorLink","graphqlErrors","networkErrors","map","message","location","path","alert","console","log","splitLink","query","definition","kind","operation","client","cache","link"],"mappings":"AAAA,SAASA,aAAT,QAA8B,wBAA9B;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SACIC,YADJ,EAEIC,aAFJ,EAGIC,cAHJ,EAIIC,QAJJ,EAKIC,IALJ,EAMIC,KANJ,QAOO,gBAPP,C,CAUA;;AACA,MAAMC,MAAM,GAAG,IAAIT,aAAJ,CAAkB;AAC7BU,EAAAA,GAAG,EAAEC,OAAO,CAACC,QAAR,CAAiBC,qBADO;AAE7BC,EAAAA,OAAO,EAAE;AACLC,IAAAA,SAAS,EAAE,IADN,CAEL;AACA;AACA;;AAJK;AAFoB,CAAlB,CAAf;AAUA,MAAMC,QAAQ,GAAG,IAAIV,QAAJ,CAAa;AAC1BI,EAAAA,GAAG,EAAEC,OAAO,CAACM,GAAR,CAAYJ;AADS,CAAb,CAAjB,C,CAIA;;AACA,MAAMK,SAAS,GAAGjB,OAAO,CAAC,CAAC;AAAEkB,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAAsC;AAC5D,MAAID,aAAJ,EAAmB;AACfA,IAAAA,aAAa,CAACE,GAAd,CAAkB,CAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,QAAX;AAAqBC,MAAAA;AAArB,KAAD,KAAiC;AAC/CC,MAAAA,KAAK,CAAC,oBAAoBH,OAArB,CAAL;AACH,KAFD;AAGH,GAL2D,CAO5D;AACA;;;AACA,MAAIF,aAAJ,EAAmB;AACfM,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBP,aAAc,EAA9C;AACH;AACJ,CAZwB,CAAzB,C,CAcA;AACA;AACA;AACA;;AACA,MAAMQ,SAAS,GAAGpB,KAAK,CACnB,CAAC;AAAEqB,EAAAA;AAAF,CAAD,KAAe;AACX,QAAMC,UAAU,GAAG5B,iBAAiB,CAAC2B,KAAD,CAApC;AACA,SACIC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF7B;AAIH,CAPkB,EAQnBvB,MARmB,EASnBO,QATmB,CAAvB;AAYA,MAAMiB,MAAM,GAAG,IAAI9B,YAAJ,CAAiB;AAC5B+B,EAAAA,KAAK,EAAE,IAAI9B,aAAJ,EADqB;AAE5B+B,EAAAA,IAAI,EAAE5B,IAAI,CAAC,CAACW,SAAD,EAAYU,SAAZ,CAAD;AAFkB,CAAjB,CAAf;AAKA,SACIvB,cADJ,EAEI4B,MAFJ","sourcesContent":["import { WebSocketLink } from '@apollo/client/link/ws';\nimport { onError } from '@apollo/client/link/error'\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport {\n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n    HttpLink,\n    from,\n    split\n} from \"@apollo/client\"\n\n\n// use for Pub/Sub (Subscription)\nconst wsLink = new WebSocketLink({\n    uri: process.env_prod.REACT_APP_GRAPHQL_URI,\n    options: {\n        reconnect: true,\n        // connectionParams: {\n        //     authToken: '<authToken>',\n        // }\n    }\n});\n\nconst httpLink = new HttpLink({\n    uri: process.env.REACT_APP_GRAPHQL_URI\n});\n\n// https://www.apollographql.com/docs/react/data/error-handling/\nconst errorLink = onError(({ graphqlErrors, networkErrors }) => {\n    if (graphqlErrors) {\n        graphqlErrors.map(({ message, location, path }) => {\n            alert('GraphQL Error: ' + message);\n        });\n    }\n    \n    // To retry on network errors, we recommend the RetryLink\n    // instead of the onError link. This just logs the error.\n    if (networkErrors) {\n        console.log(`[Network error]: ${networkErrors}`);\n    }\n})\n\n// The split function takes three parameters: (https://www.apollographql.com/docs/react/data/subscriptions/)\n// * A function that's called for each operation to execute\n// * The Link to use for an operation if the function returns a \"truthy\" value\n// * The Link to use for an operation if the function returns a \"falsy\" value\nconst splitLink = split(\n    ({ query }) => {\n        const definition = getMainDefinition(query);\n        return (\n            definition.kind === 'OperationDefinition' &&\n            definition.operation === 'subscription'\n        );\n    },\n    wsLink,\n    httpLink,\n);\n\nconst client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: from([errorLink, splitLink])\n})\n\nexport {\n    ApolloProvider,\n    client\n}"]},"metadata":{},"sourceType":"module"}