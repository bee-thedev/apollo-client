{"ast":null,"code":"var _jsxFileName = \"/home/beenysh/myprojects/reactapps/apollo-client/src/GraphQL/apolloSetup.js\",\n    _s = $RefreshSig$();\n\n// import { WebSocketLink } from '@apollo/client/link/ws';\n// import { onError } from '@apollo/client/link/error'\n// // import { getMainDefinition } from '@apollo/client/utilities';\n// import {\n//     ApolloClient,\n//     InMemoryCache,\n//     ApolloProvider,\n//     HttpLink,\n//     // from,\n//     // split\n// } from \"@apollo/client\"\n// // use for Pub/Sub (Subscription)\n// const wsLink = new WebSocketLink({\n//     uri: process.env.REACT_APP_GRAPHQL_WS_URI,\n//     options: {\n//         reconnect: true,\n//         // connectionParams: {\n//         //     authToken: '<authToken>',\n//         // }\n//     }\n// });\n// const httpLink = new HttpLink({\n//     uri: process.env.REACT_APP_GRAPHQL_URI\n// });\n// // https://www.apollographql.com/docs/react/data/error-handling/\n// const errorLink = onError(({ graphqlErrors, networkErrors }) => {\n//     if (graphqlErrors) {\n//         graphqlErrors.map(({ message, location, path }) => {\n//             alert('GraphQL Error: ' + message);\n//         });\n//     }\n//     // To retry on network errors, we recommend the RetryLink\n//     // instead of the onError link. This just logs the error.\n//     if (networkErrors) {\n//         console.log(`[Network error]: ${networkErrors}`);\n//     }\n// })\n// // The split function takes three parameters: (https://www.apollographql.com/docs/react/data/subscriptions/)\n// // * A function that's called for each operation to execute\n// // * The Link to use for an operation if the function returns a \"truthy\" value\n// // * The Link to use for an operation if the function returns a \"falsy\" value\n// // const splitLink = split(\n// //     ({ query }) => {\n// //         const definition = getMainDefinition(query);\n// //         return (\n// //             definition.kind === 'OperationDefinition' &&\n// //             definition.operation === 'subscription'\n// //         );\n// //     },\n// //     wsLink,\n// //     httpLink,\n// // );\n// // const client = new ApolloClient({\n// //     cache: new InMemoryCache(),\n// //     link: from([errorLink, splitLink])\n// // })\n// \nimport React from 'react';\nimport { render } from 'react-dom';\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: 'https://48p1r2roz4.sse.codesandbox.io',\n  cache: new InMemoryCache()\n});\nconst EXCHANGE_RATES = gql`\n  query GetExchangeRates {\n    rates(currency: \"USD\") {\n      currency\n      rate\n    }\n  }\n`;\n\nfunction ExchangeRates() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(EXCHANGE_RATES);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 23\n  }, this);\n  return data.rates.map(({\n    currency,\n    rate\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [currency, \": \", rate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)\n  }, currency, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 7\n  }, this));\n}\n\n_s(ExchangeRates, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = ExchangeRates;\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My first Apollo app \\uD83D\\uDE80\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExchangeRates, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nrender( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 115,\n  columnNumber: 3\n}, this), document.getElementById('root'));\nexport { ApolloProvider, client };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ExchangeRates\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/home/beenysh/myprojects/reactapps/apollo-client/src/GraphQL/apolloSetup.js"],"names":["React","render","ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","client","uri","cache","EXCHANGE_RATES","ExchangeRates","loading","error","data","rates","map","currency","rate","App","document","getElementById"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,GALF,QAMO,gBANP;;AAQA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE,uCADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIN,aAAJ;AAFuB,CAAjB,CAAf;AAKA,MAAMO,cAAc,GAAGJ,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;;AASA,SAASK,aAAT,GAAyB;AAAA;;AACrB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACK,cAAD,CAAzC;AAEA,MAAIE,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,SAAOC,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAe,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,kBACpB;AAAA,2BACE;AAAA,iBACGD,QADH,QACeC,IADf;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,KAAUD,QAAV;AAAA;AAAA;AAAA;AAAA,UADK,CAAP;AAOD;;GAbMN,a;UAC4BN,Q;;;KAD5BM,a;;AAgBT,SAASQ,GAAT,GAAe;AACb,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;MAPQA,G;AAQTlB,MAAM,eACJ,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEM,MAAxB;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADI,EAIJa,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJI,CAAN;AAQA,SACIjB,cADJ,EAEIG,MAFJ","sourcesContent":["// import { WebSocketLink } from '@apollo/client/link/ws';\n// import { onError } from '@apollo/client/link/error'\n// // import { getMainDefinition } from '@apollo/client/utilities';\n// import {\n//     ApolloClient,\n//     InMemoryCache,\n//     ApolloProvider,\n//     HttpLink,\n//     // from,\n//     // split\n// } from \"@apollo/client\"\n\n\n// // use for Pub/Sub (Subscription)\n// const wsLink = new WebSocketLink({\n//     uri: process.env.REACT_APP_GRAPHQL_WS_URI,\n//     options: {\n//         reconnect: true,\n//         // connectionParams: {\n//         //     authToken: '<authToken>',\n//         // }\n//     }\n// });\n\n// const httpLink = new HttpLink({\n//     uri: process.env.REACT_APP_GRAPHQL_URI\n// });\n\n// // https://www.apollographql.com/docs/react/data/error-handling/\n// const errorLink = onError(({ graphqlErrors, networkErrors }) => {\n//     if (graphqlErrors) {\n//         graphqlErrors.map(({ message, location, path }) => {\n//             alert('GraphQL Error: ' + message);\n//         });\n//     }\n    \n//     // To retry on network errors, we recommend the RetryLink\n//     // instead of the onError link. This just logs the error.\n//     if (networkErrors) {\n//         console.log(`[Network error]: ${networkErrors}`);\n//     }\n// })\n\n// // The split function takes three parameters: (https://www.apollographql.com/docs/react/data/subscriptions/)\n// // * A function that's called for each operation to execute\n// // * The Link to use for an operation if the function returns a \"truthy\" value\n// // * The Link to use for an operation if the function returns a \"falsy\" value\n// // const splitLink = split(\n// //     ({ query }) => {\n// //         const definition = getMainDefinition(query);\n// //         return (\n// //             definition.kind === 'OperationDefinition' &&\n// //             definition.operation === 'subscription'\n// //         );\n// //     },\n// //     wsLink,\n// //     httpLink,\n// // );\n\n// // const client = new ApolloClient({\n// //     cache: new InMemoryCache(),\n// //     link: from([errorLink, splitLink])\n// // })\n\n// \nimport React from 'react';\nimport { render } from 'react-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: 'https://48p1r2roz4.sse.codesandbox.io',\n  cache: new InMemoryCache()\n});\n\nconst EXCHANGE_RATES = gql`\n  query GetExchangeRates {\n    rates(currency: \"USD\") {\n      currency\n      rate\n    }\n  }\n`; \n\nfunction ExchangeRates() {\n    const { loading, error, data } = useQuery(EXCHANGE_RATES);\n  \n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error :(</p>;\n  \n    return data.rates.map(({ currency, rate }) => (\n      <div key={currency}>\n        <p>\n          {currency}: {rate}\n        </p>\n      </div>\n    ));\n  }\n\n\nfunction App() {\n  return (\n    <div>\n      <h2>My first Apollo app ðŸš€</h2>\n      <ExchangeRates />\n    </div>\n  );\n}\nrender(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n\nexport {\n    ApolloProvider,\n    client\n}"]},"metadata":{},"sourceType":"module"}